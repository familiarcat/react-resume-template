/**
 * Server-Side Data Fetching
 * 
 * This file provides utilities for server-side data fetching with AWS Amplify,
 * following best practices for Next.js server components.
 */

import { createServerRunner } from '@aws-amplify/adapter-nextjs';
import { generateServerClientUsingReqRes } from '@aws-amplify/adapter-nextjs/api';
import { revalidatePath } from 'next/cache';

// Import configuration (will be generated by ampx)
let amplifyConfig;
try {
  amplifyConfig = require('@/amplifyconfiguration.json');
} catch (e) {
  console.warn('Amplify configuration not found. Using default configuration.');
  amplifyConfig = {
    aws_project_region: process.env.NEXT_PUBLIC_AWS_REGION || 'us-east-2',
    aws_cognito_region: process.env.NEXT_PUBLIC_AWS_REGION || 'us-east-2',
    aws_appsync_region: process.env.NEXT_PUBLIC_AWS_REGION || 'us-east-2',
  };
}

// Create server runner
export const { runWithAmplifyServerContext } = createServerRunner({
  config: amplifyConfig
});

// Generate server client
export async function getServerClient(request: Request, response: Response) {
  return generateServerClientUsingReqRes({
    request,
    response,
    config: amplifyConfig
  });
}

// Server action to fetch data
export async function fetchServerData<T>(
  action: (client: Awaited<ReturnType<typeof getServerClient>>) => Promise<T>,
  options?: { revalidate?: string }
): Promise<{ data: T | null; error: Error | null }> {
  try {
    const data = await runWithAmplifyServerContext({
      nextServerContext: { request: Request },
      operation: async (contextSpec) => {
        const client = await getServerClient(
          contextSpec.request,
          contextSpec.response
        );
        return action(client);
      }
    });
    
    // Revalidate path if specified
    if (options?.revalidate) {
      revalidatePath(options.revalidate);
    }
    
    return { data, error: null };
  } catch (error) {
    console.error('Server data operation failed:', error);
    return { 
      data: null, 
      error: error instanceof Error ? error : new Error(String(error)) 
    };
  }
}

// Server action to create data
export async function createServerData<T>(
  action: (client: Awaited<ReturnType<typeof getServerClient>>) => Promise<T>,
  path: string
): Promise<{ data: T | null; error: Error | null }> {
  try {
    const data = await runWithAmplifyServerContext({
      nextServerContext: { request: Request },
      operation: async (contextSpec) => {
        const client = await getServerClient(
          contextSpec.request,
          contextSpec.response
        );
        return action(client);
      }
    });
    
    // Always revalidate path after data creation
    revalidatePath(path);
    
    return { data, error: null };
  } catch (error) {
    console.error('Server data creation failed:', error);
    return { 
      data: null, 
      error: error instanceof Error ? error : new Error(String(error)) 
    };
  }
}

// Server action to update data
export async function updateServerData<T>(
  action: (client: Awaited<ReturnType<typeof getServerClient>>) => Promise<T>,
  path: string
): Promise<{ data: T | null; error: Error | null }> {
  try {
    const data = await runWithAmplifyServerContext({
      nextServerContext: { request: Request },
      operation: async (contextSpec) => {
        const client = await getServerClient(
          contextSpec.request,
          contextSpec.response
        );
        return action(client);
      }
    });
    
    // Always revalidate path after data update
    revalidatePath(path);
    
    return { data, error: null };
  } catch (error) {
    console.error('Server data update failed:', error);
    return { 
      data: null, 
      error: error instanceof Error ? error : new Error(String(error)) 
    };
  }
}

// Server action to delete data
export async function deleteServerData<T>(
  action: (client: Awaited<ReturnType<typeof getServerClient>>) => Promise<T>,
  path: string
): Promise<{ success: boolean; error: Error | null }> {
  try {
    await runWithAmplifyServerContext({
      nextServerContext: { request: Request },
      operation: async (contextSpec) => {
        const client = await getServerClient(
          contextSpec.request,
          contextSpec.response
        );
        return action(client);
      }
    });
    
    // Always revalidate path after data deletion
    revalidatePath(path);
    
    return { success: true, error: null };
  } catch (error) {
    console.error('Server data deletion failed:', error);
    return { 
      success: false, 
      error: error instanceof Error ? error : new Error(String(error)) 
    };
  }
}

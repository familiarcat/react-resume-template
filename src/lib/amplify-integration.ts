/**
 * AWS Amplify Integration
 * 
 * This file provides a centralized configuration for AWS Amplify,
 * following best practices for Next.js integration.
 */

import { Amplify } from 'aws-amplify';
import { generateClient } from 'aws-amplify/api';
import { fetchAuthSession } from 'aws-amplify/auth';
import { uploadData, downloadData, remove } from 'aws-amplify/storage';

// Import configuration (will be generated by ampx)
let amplifyConfig;
try {
  amplifyConfig = require('@/amplifyconfiguration.json');
} catch (e) {
  console.warn('Amplify configuration not found. Using default configuration.');
  amplifyConfig = {
    aws_project_region: process.env.NEXT_PUBLIC_AWS_REGION || 'us-east-2',
    aws_cognito_region: process.env.NEXT_PUBLIC_AWS_REGION || 'us-east-2',
    aws_appsync_region: process.env.NEXT_PUBLIC_AWS_REGION || 'us-east-2',
  };
}

// Initialize Amplify only once on the client side
let isConfigured = false;

export function configureAmplify() {
  if (typeof window !== 'undefined' && !isConfigured) {
    Amplify.configure(amplifyConfig, { ssr: true });
    isConfigured = true;
  }
}

// Initialize on import
configureAmplify();

// Generate API client
export const client = generateClient();

// Auth utilities
export const Auth = {
  getCurrentUser: async () => {
    try {
      const { tokens } = await fetchAuthSession();
      return tokens ? { isAuthenticated: true, tokens } : { isAuthenticated: false };
    } catch (error) {
      console.error('Error getting current user:', error);
      return { isAuthenticated: false };
    }
  },
  
  isAuthenticated: async () => {
    try {
      const { tokens } = await fetchAuthSession();
      return !!tokens;
    } catch (error) {
      return false;
    }
  }
};

// Storage utilities
export const Storage = {
  upload: async (key: string, data: File | Blob | Buffer, options = {}) => {
    try {
      const result = await uploadData({
        key,
        data,
        options
      });
      return { success: true, key: result.key };
    } catch (error) {
      console.error('Error uploading file:', error);
      return { success: false, error };
    }
  },
  
  download: async (key: string) => {
    try {
      return await downloadData({ key });
    } catch (error) {
      console.error('Error downloading file:', error);
      throw error;
    }
  },
  
  remove: async (key: string) => {
    try {
      await remove({ key });
      return { success: true };
    } catch (error) {
      console.error('Error removing file:', error);
      return { success: false, error };
    }
  }
};

export default {
  client,
  Auth,
  Storage,
  configureAmplify
};
